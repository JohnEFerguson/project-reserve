const fs = require("fs");
const path = require("path");
const express = require("express");
const http = require("http");
const server = express();
const bodyParser = require("body-parser");
const morgan = require("morgan");
const compression = require("compression");
const db = require(path.join(__dirname, "/src/api/main/config/db"));
const { STATUS_UPDATE, emitter } = require(path.join(__dirname, "/src/socketConstants"));

const patientsRoute = require(path.join(__dirname, "/src/api/main/routes/patients"));
const configurationsRoute = require(path.join(__dirname, "/src/api/main/routes/configurations"));
const sourceFilesRoute = require(path.join(__dirname, "/src/api/main/routes/source_files"));

const serverInfo =
  `express/${require("express/package.json").version} ` +
  `vue-server-renderer/${require("vue-server-renderer/package.json").version}`;

const resolve = (file) => path.resolve(__dirname, file);
const isProd = true // process.env.NODE_ENV === "production";

server.db = db;

server.use(morgan("combined"));
server.use(bodyParser.json());

server.use((req, res, next) => {
  res.header("Access-Control-Allow-Origin", "*");
  res.header("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE");
  res.header(
    "Access-Control-Allow-Headers",
    "Origin, X-Requested-With, Content-Type, Accept"
  );
  next();
});

const sequelizePromise = db.sequelize.sync({ force: false });

server.use(async (req, res, next) => {
  await sequelizePromise;
  req.db = db;
  next();
});

server.use(patientsRoute);
server.use(configurationsRoute);
server.use(sourceFilesRoute);

const { createBundleRenderer } = require("vue-server-renderer");

function createRenderer(bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(
    bundle,
    Object.assign(options, {
      // this is only needed when vue-server-renderer is npm-linked
      basedir: resolve("./dist"),
      // recommended for performance
      runInNewContext: false,
    })
  );
}
let renderer;
let readyPromise;
const templatePath = resolve("./index.template.html");
if (isProd) {
  // In production: create server renderer using template and built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const template = fs.readFileSync(templatePath, "utf-8");
  const bundle = require("./dist/vue-ssr-server-bundle.json");
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require("./dist/vue-ssr-client-manifest.json");
  renderer = createRenderer(bundle, {
    template,
    clientManifest,
  });
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  readyPromise = require(path.join(__dirname, "./build/setup-dev-server"))(
    server,
    templatePath,
    (bundle, options) => {
      renderer = createRenderer(bundle, options);
    }
  );
}
function render(req, res) {
  const context = { url: req.url };

  res.setHeader("Content-Type", "text/html");
  res.setHeader("Server", serverInfo);

  const handleError = (err) => {
    if (err.url) {
      res.redirect(err.url);
    } else if (err.code === 404) {
      res.status(404).send("404 | Page Not Found");
    } else {
      // Render Error Page or Redirect
      res.status(500).send("500 | Internal Server Error");
      console.error(`error during render : ${req.url}`);
      console.error(err.stack);
    }
  };
  renderer.renderToString(context, (err, html) => {
    if (err) {
      console.error(err);
      if (err.code === 404) {
        res.status(404).end("Page not found");
      } else {
        res.status(500).end("Internal Server Error");
      }
    } else {
      res.send(html, { "Content-Type": "text/html" }, 201);
    }
  });
}

const serve = (path, cache) =>
  express.static(resolve(path), {
    maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0,
  });

server.use(compression({ threshold: 0 }));
server.use("/dist", serve("./dist", true));
server.use("/public", serve("./public", true));

server.get(
  "*",
  isProd
    ? render
    : (req, res) => {
      readyPromise.then(() => render(req, res));
    }
);

const httpServer = http.createServer(server);
const io = require("socket.io")(httpServer);

httpServer.listen(8080, () => {
  console.log("Server listening on port 8080");
});

const clientSocket = io.of("/connection/client");
emitter.on(STATUS_UPDATE, (statusObj) => {
  clientSocket.emit(STATUS_UPDATE, statusObj);
});
clientSocket.on("connection", (socket) => {
  socket.on(STATUS_UPDATE, (statusObj) => {
    socket.emit(STATUS_UPDATE, statusObj);
  });
});

/**
 * 
 * ELECTRON
 * 
 */

const { app, BrowserWindow } = require('electron');

// Handle creating/removing shortcuts on Windows when installing/uninstalling.



const createWindow = () => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    width: 800,
    height: 600,
  });

  // and load the index.html of the app.
  mainWindow.loadURL("http://localhost:8080/");

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});